{"version":3,"file":"static/js/140.80d01a12.chunk.js","mappings":"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","sources":["webpack://vox-typescript/./src/features/chat/ChatPage.module.scss?1986","features/chat/add-message-form/AddMessageForm.tsx","features/chat/messages/Message.tsx","features/chat/messages/Messages.tsx","features/chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatPage_container__MdG0m\",\"messages\":\"ChatPage_messages__2EGBZ\",\"user\":\"ChatPage_user__jtwCz\",\"authUser\":\"ChatPage_authUser__p7UXO\"};","import React, { useEffect, useState } from \"react\";\nimport SvgSelector from \"../../../components/svgSelector/SvgSelector\";\nimport { IconButton, TextareaAutosize } from \"@mui/material\";\n\ntype TAddMessageForm = {\n  wsChannel: WebSocket | null;\n};\n\nconst AddMessageForm: React.FC<TAddMessageForm> = ({ wsChannel }) => {\n  const [message, setMessage] = useState<string>(\"\");\n  const [readyStatus, setReadyStatus] = useState<\"pending\" | \"fulfilled\">(\n    \"pending\"\n  );\n  useEffect(() => {\n    let openHandler = () => {\n      setReadyStatus(\"fulfilled\");\n    };\n    wsChannel?.addEventListener(\"open\", openHandler);\n    return () => {\n      wsChannel?.removeEventListener(\"open\", openHandler);\n    };\n  }, [wsChannel]);\n\n  const sendMessage = () => {\n    if (message === \"\" || message === \" \") return;\n    wsChannel?.send(message);\n    setMessage(\"\");\n  };\n\n  return (\n    <div className=\"text-field-container\">\n      <div>\n        <IconButton>\n          <SvgSelector id=\"clip\" />\n        </IconButton>\n        <TextareaAutosize\n          placeholder=\"Message\"\n          maxRows=\"3\"\n          onChange={(e) => setMessage(e.currentTarget.value)}\n          value={message}\n        />\n      </div>\n      <div>\n        <IconButton\n          onClick={sendMessage}\n          disabled={!wsChannel || readyStatus !== \"fulfilled\"}\n        >\n          <SvgSelector id=\"send\" />\n        </IconButton>\n        <IconButton>\n          <SvgSelector id=\"image\" />\n        </IconButton>\n      </div>\n    </div>\n  );\n};\n\nexport default AddMessageForm;\n","import React from \"react\";\r\nimport { Avatar } from \"@mui/material\";\r\nimport avatar from \"../../../assets/img/user.png\";\r\nimport clsx from \"clsx\";\r\nimport classes from \"../ChatPage.module.scss\";\r\nimport { useAppSelector } from \"../../../app/hooks\";\r\nimport { TChatMessage } from \"../ChatPage.types\";\r\n\r\nconst Message: React.FC<{ message: TChatMessage }> = ({ message }) => {\r\n  const authUser = useAppSelector((state) => state.profileReducer.authUser);\r\n\r\n  return (\r\n    <div\r\n      className={authUser?.userId === message.userId ? classes.authUser : \"\"}\r\n    >\r\n      <div className={clsx(\"user\", \"user-container\", classes.user)}>\r\n        <Avatar src={message.photo || avatar} />\r\n        <div className=\"about-user\">\r\n          <p className=\"username\">{message.userName}</p>\r\n          <p className=\"unique-name\">{message.message}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Message from \"./Message\";\nimport classes from \"../ChatPage.module.scss\";\nimport clsx from \"clsx\";\nimport { TChatMessage } from \"../ChatPage.types\";\n\ntype TMessages = {\n  wsChannel: WebSocket | null;\n};\n\nconst Messages: React.FC<TMessages> = ({ wsChannel }) => {\n  const [messages, setMessages] = useState<TChatMessage[]>([]);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    containerRef &&\n      containerRef.current &&\n      containerRef.current.scrollTo(0, containerRef.current.scrollHeight);\n  };\n  useEffect(() => {\n    scrollToBottom();\n    let messageHandler = (event: MessageEvent) => {\n      let newMessages = JSON.parse(event.data);\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\n    };\n\n    wsChannel?.addEventListener(\"message\", messageHandler);\n    return () => {\n      wsChannel?.removeEventListener(\"message\", messageHandler);\n    };\n  }, [wsChannel, messages]);\n\n  return (\n    <div className={clsx(classes.messages, \"scrollbar\")} ref={containerRef}>\n      {messages.map((message: TChatMessage, i) => (\n        <Message message={message} key={i} />\n      ))}\n    </div>\n  );\n};\n\nexport default Messages;\n","import React, { useEffect, useState } from \"react\";\nimport classes from \"./ChatPage.module.scss\";\nimport AddMessageForm from \"./add-message-form/AddMessageForm\";\nimport Messages from \"./messages/Messages\";\nimport clsx from \"clsx\";\n\nconst ChatPage: React.FC = ({}) => {\n  const [wsChannel, setWsChannel] = useState<WebSocket | null>(null);\n\n  useEffect(() => {\n    let ws: WebSocket;\n    const closeHandler = () => {\n      setTimeout(createChannel, 3000);\n    };\n    function createChannel() {\n      ws?.removeEventListener(\"close\", closeHandler);\n      ws?.close();\n      ws = new WebSocket(\n        \"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\"\n      );\n      ws.addEventListener(\"close\", closeHandler);\n      setWsChannel(ws);\n    }\n    createChannel();\n    return () => {\n      ws.removeEventListener(\"close\", closeHandler);\n      ws.close();\n    };\n  }, []);\n\n  return (\n    <div className={clsx(\"messenger-chat-container\", classes.container)}>\n      <Messages wsChannel={wsChannel} />\n      <AddMessageForm wsChannel={wsChannel} />\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"names":["_ref","wsChannel","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","readyStatus","setReadyStatus","useEffect","openHandler","addEventListener","removeEventListener","_jsxs","className","children","_jsx","IconButton","SvgSelector","id","TextareaAutosize","placeholder","maxRows","onChange","e","currentTarget","value","onClick","send","disabled","authUser","useAppSelector","state","profileReducer","userId","classes","clsx","Avatar","src","photo","avatar","userName","messages","setMessages","containerRef","useRef","current","scrollTo","scrollHeight","messageHandler","event","newMessages","JSON","parse","data","prevMessages","concat","_toConsumableArray","ref","map","i","Message","_objectDestructuringEmpty","setWsChannel","ws","closeHandler","setTimeout","createChannel","_ws","_ws2","close","WebSocket","Messages","AddMessageForm"],"sourceRoot":""}